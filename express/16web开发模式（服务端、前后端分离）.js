const express = require('express');
const app = express();
/**
 * 服务端渲染的概念：
 *  服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用Ajax这样的技术额外
 *  请求页面的数据，代码示例如下：
 */

app.get('/index.html', (req, res) => {
    // 要渲染的数据
    const user = { name: 'zs', age: 20 };
    // 服务端通过字符串的拼接，动态生成HTML内容
    const html = `<h1>姓名: ${user.name}，年龄: ${user.age}</h1>`;
    // 把生成好的页面内容响应给客户端，因此客户端拿到的是带有真实数据的HTML页面
    res.send(html)
})

/**
 * 服务端渲染的优缺点：
 *  优点：
 *     1：前端耗时少：
 *          因为服务器负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电
 *     2：有利于SEO：
 *          因为服务器端响应的是完整的HTML页面内容，所以爬虫更容易爬取获得信息，更有利于SEO。
 *  缺点：
 *      1：占用服务器端资源：
 *          即服务器端完成HTML页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力
 *      2：不利于前后端分离，开发效率低：
 *          使用服务器渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发
 */



/**
 * 前后端分离的概念：
 *    依赖于Ajax技术的广泛应用，简而言之，后端只负责提供API接口，前端使用Ajax调用接口的开发模式
 * 
 * 前后端分离的优缺点：
 *   优点：
 *      1：开发体验好
 *              前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性
 *      2：用户体验好：
 *              Ajax技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新
 *      3：减轻了服务器端的渲染压力：
 *              因为页面最终是在每个用户的浏览器中生成的
 *  缺点：
 *      不利于SEO优化：
 *              因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫无法抓取页面的有效信息
*          解决方案：
 *              利用Vue、React等前端框架的SSR（server side render）技术能够很好的解决SEO问题     
 */

app.listen(80,()=>{
    console.log('express server run at http://127.0.0.1');
})

// 16web开发模式（服务端、前后端分离）